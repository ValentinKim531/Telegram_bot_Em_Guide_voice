import os
from datetime import datetime

from aiogram import Router, F
from aiogram.types import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    Message,
    FSInputFile,
)
from aiogram.fsm.context import FSMContext
import aiofiles
from dateutil.relativedelta import relativedelta

from handlers.registration_handler import start_survey
from services.database.models import Survey, Database, User
import pandas as pd
from io import BytesIO
import logging

from services.save_survey_response import (
    get_calendar_marks,
    generate_calendar_markup,
    get_survey_by_date,
    get_surveys_for_month,
)
from utils.datetime_utils import get_current_time_in_almaty_naive

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text.in_("/headache"))
async def menu_command_headache(
    message: Message, state: FSMContext, database: Database
):

    record_for_today_ru = InlineKeyboardButton(
        text="üìù –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="record_for_ru"
    )
    record_for_today_kz = InlineKeyboardButton(
        text="üìù –ë“Ø–≥—ñ–Ω–≥—ñ –∂–∞–∑–±–∞", callback_data="record_for_kk"
    )

    markup_ru = InlineKeyboardMarkup(inline_keyboard=[[record_for_today_ru]])
    markup_kz = InlineKeyboardMarkup(inline_keyboard=[[record_for_today_kz]])

    # Check if user exists
    user_id = message.from_user.id
    existing_user_language = await database.get_entity_parameter(
        model_class=User, filters={"userid": user_id}, parameter="language"
    )
    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "static/img/diary.jpeg"

    if existing_user_language:
        if existing_user_language == "kk":
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption="–ë“Ø–≥—ñ–Ω–≥–µ –∂–∞–∑–±–∞ –∂–∞—Å–∞–π –∞–ª–∞—Å—ã–∑:",
                reply_markup=markup_kz,
            )
        else:
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption="–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:",
                reply_markup=markup_ru,
            )
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –≤—ã–±—Ä–∞–≤ —è–∑—ã–∫."
            "–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–∞–≤ /start \n–≤ –º–µ–Ω—é ‚ÜôÔ∏è"
        )


@router.message(F.text.in_("/calendar"))
async def show_calendar(
    message: Message, state: FSMContext, database: Database
):
    user_id = message.from_user.id
    current_date = get_current_time_in_almaty_naive()
    month = current_date.month
    year = current_date.year

    marks = await get_calendar_marks(database, user_id, month, year)
    calendar_markup = generate_calendar_markup(month, year, marks)

    diary_title = "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫\n\n–ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª–∞ –ª–∏ –±–æ–ª—å\nüî∏ - –±–æ–ª—å –±–µ–∑ –ª–µ–∫–∞—Ä—Å—Ç–≤\nüî∫ - –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞\n‚úì - –∑–∞–ø–∏—Å—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏"

    await message.answer(diary_title, reply_markup=calendar_markup)
    await state.update_data(calendar_date=current_date, calendar_marks=marks)


@router.callback_query(lambda c: c.data and c.data.startswith("prev_month"))
async def prev_month(
    callback_query: CallbackQuery, state: FSMContext, database: Database
):
    data = await state.get_data()
    calendar_date = data.get("calendar_date")
    prev_date = calendar_date - relativedelta(months=1)

    marks = await get_calendar_marks(
        database, callback_query.from_user.id, prev_date.month, prev_date.year
    )
    calendar_markup = generate_calendar_markup(
        prev_date.month, prev_date.year, marks
    )

    await callback_query.message.edit_reply_markup(
        reply_markup=calendar_markup
    )
    await state.update_data(calendar_date=prev_date, calendar_marks=marks)


@router.callback_query(lambda c: c.data and c.data.startswith("next_month"))
async def next_month(
    callback_query: CallbackQuery, state: FSMContext, database: Database
):
    data = await state.get_data()
    calendar_date = data.get("calendar_date")
    next_date = calendar_date + relativedelta(months=1)

    marks = await get_calendar_marks(
        database, callback_query.from_user.id, next_date.month, next_date.year
    )
    calendar_markup = generate_calendar_markup(
        next_date.month, next_date.year, marks
    )

    await callback_query.message.edit_reply_markup(
        reply_markup=calendar_markup
    )
    await state.update_data(calendar_date=next_date, calendar_marks=marks)


@router.callback_query(lambda c: c.data and c.data.startswith("date_"))
async def process_date_selection(
    callback_query: CallbackQuery, state: FSMContext, database: Database
):
    user_id = callback_query.from_user.id
    date_str = callback_query.data.split("_")[1]

    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    survey = await get_survey_by_date(database, user_id, selected_date)

    if survey:
        response_text = (
            f"–î–∞—Ç–∞: {selected_date}\n"
            f"–í—Ä–µ–º—è: {survey.created_at.time()}\n"
            f"–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å: {survey.headache_today}\n"
            f"–ü—Ä–∏–Ω—è—Ç–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ: {survey.medicament_today or '–ù–µ—Ç'}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {survey.comments or '–ù–µ—Ç'}"
        )
        button_text = f"–ò–∑–º–µ–Ω–∏—Ç—å {selected_date}"
    else:
        response_text = (
            f"–î–∞—Ç–∞: {selected_date}\n"
            f"–ó–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å."
        )
        button_text = f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {selected_date}"

    inline_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=button_text, callback_data=f"add_{date_str}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_calendar"
                )
            ],
        ]
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü, –≥–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        selected_date=selected_date,
        selected_month=selected_date.month,
        selected_year=selected_date.year,
    )
    await callback_query.message.edit_text(
        response_text, reply_markup=inline_kb
    )


@router.callback_query(lambda c: c.data == "back_to_calendar")
async def back_to_calendar(
    callback_query: CallbackQuery, state: FSMContext, database: Database
):
    data = await state.get_data()
    selected_month = data.get("selected_month")
    selected_year = data.get("selected_year")

    if not selected_month or not selected_year:
        now = datetime.now()
        selected_month = now.month
        selected_year = now.year

    marks = await get_calendar_marks(
        database, callback_query.from_user.id, selected_month, selected_year
    )

    markup = generate_calendar_markup(selected_month, selected_year, marks)

    diary_title = "–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫\n\n–ï—Å–ª–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å, —Ç–æ –∑–Ω–∞—á–æ–∫ –ø–æ–∫–∞–∂–µ—Ç, –±—ã–ª–∞ –ª–∏ –±–æ–ª—å\nüî∏ - –±–æ–ª—å –±–µ–∑ –ª–µ–∫–∞—Ä—Å—Ç–≤\nüî∫ - –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å –∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞\n‚úì - –∑–∞–ø–∏—Å—å –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏"

    await callback_query.message.edit_text(diary_title, reply_markup=markup)
    await state.update_data(
        selected_month=selected_month, selected_year=selected_year
    )


@router.callback_query(lambda c: c.data and c.data.startswith("add_"))
async def add_or_update_record(
    callback_query: CallbackQuery, state: FSMContext
):
    date_str = callback_query.data.split("_")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()

    await state.update_data(selected_date=selected_date)
    await start_survey(
        state,
        message=callback_query.message,
        bot=callback_query.bot,
        user_id=callback_query.from_user.id,
    )


@router.message(F.text.in_("/statistics"))
async def menu_command_statistics(message: Message, database: Database):
    download_statistics_button = InlineKeyboardButton(
        text="–°–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="download_statistics"
    )

    markup = InlineKeyboardMarkup(
        inline_keyboard=[[download_statistics_button]]
    )

    # Check if user exists
    user_id = message.from_user.id
    existing_user = await database.get_entity_parameter(
        model_class=User, filters={"userid": user_id}
    )

    # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    photo_path = "static/img/diary.jpeg"

    if existing_user:
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption="–î–Ω–µ–≤–Ω–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–º\n\n–ê —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–Ω–µ–≤–Ω–∏–∫ –≤—Ä–∞—á—É.",
            reply_markup=markup,
        )
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –≤—ã–±—Ä–∞–≤ —è–∑—ã–∫."
            "–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–∞–≤ /start \n–≤ –º–µ–Ω—é ‚ÜôÔ∏è"
        )


@router.callback_query(F.data == "download_statistics")
async def send_statistics_file(
    callback_query: CallbackQuery, state: FSMContext, database: Database
):
    user_id = callback_query.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        entities = await database.get_entities(Survey)
        user_info = await database.get_entities(
            User
        )  # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        if not entities:
            await callback_query.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."
            )
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ user_id
        user_records = [
            entity for entity in entities if entity.userid == user_id
        ]

        if not user_records:
            await callback_query.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ."
            )
            return

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è DataFrame —Å –∑–∞–ø–∏—Å—è–º–∏
        data = [
            {
                "–ù–æ–º–µ—Ä": record.survey_id,
                "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": record.created_at.strftime("%Y-%m-%d %H:%M"),
                "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": record.updated_at.strftime(
                    "%Y-%m-%d %H:%M"
                ),
                "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å —Å–µ–≥–æ–¥–Ω—è": record.headache_today,
                "–ì–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å —Å–µ–≥–æ–¥–Ω—è": record.medicament_today,
                "–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –±–æ–ª–∏": record.pain_intensity,
                "–û–±–ª–∞—Å—Ç—å –±–æ–ª–∏": record.pain_area,
                "–î–µ—Ç–∞–ª–∏ –æ–±–ª–∞—Å—Ç–∏": record.area_detail,
                "–¢–∏–ø –±–æ–ª–∏": record.pain_type,
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏": record.comments,
            }
            for record in user_records
        ]

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∑–∞–ø–∏—Å–µ–π
        df_records = pd.DataFrame(data)

        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ user_id
        user = [entity for entity in user_info if entity.userid == user_id]

        if not user:
            await callback_query.message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é"
            )
            return

        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = [
            {
                "User ID": record.userid,
                "username in tg": record.username,
                "firstname": record.firstname,
                "lastname": record.lastname,
                "fio": record.fio,
                "birthdate": record.birthdate.strftime("%Y-%m-%d"),
                "menstrual_cycle": record.menstrual_cycle,
                "country": record.country,
                "city": record.city,
                "medication": record.medication,
                "const_medication": record.const_medication,
                "const_medication_name": record.const_medication_name,
                "reminder_time": record.reminder_time,
                "created_at": record.created_at.strftime("%Y-%m-%d"),
            }
            for record in user
        ]
        df_user = pd.DataFrame(user_data)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel —Ñ–∞–π–ª –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ
        excel_buffer = BytesIO()
        with pd.ExcelWriter(excel_buffer, engine="xlsxwriter") as writer:
            df_user.to_excel(
                writer, sheet_name="Statistics", index=False, startrow=0
            )
            df_records.to_excel(
                writer,
                sheet_name="Statistics",
                index=False,
                startrow=len(df_user) + 2,
            )
        excel_buffer.seek(0)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        temp_file_path = "temp_statistics.xlsx"
        async with aiofiles.open(temp_file_path, "wb") as f:
            await f.write(excel_buffer.read())

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback_query.message.answer_document(
            document=FSInputFile(temp_file_path, filename="statistics.xlsx")
        )
        logging.info(
            f"User {user_id} successfully downloaded their statistics."
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(temp_file_path)

    except Exception as e:
        logging.error(f"Error generating statistics for user {user_id}: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        )
