from aiogram import Router, F, Bot
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery, FSInputFile,
)
from aiogram.fsm.context import FSMContext
from services.database import Postgres, User
from datetime import datetime
import logging

from services.scheduler_service import ReminderManager
from states.states import ReminderStates, PersonalSettingsStates

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "/settings")
async def settings_command(message: Message, state: FSMContext, database: Postgres):
    await show_settings_menu(message, state, database)

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_handler(callback_query: CallbackQuery, state: FSMContext, database: Postgres):
    await callback_query.message.delete()
    await show_settings_menu(callback_query.message, state, database)

async def show_settings_menu(message: Message, state: FSMContext, database: Postgres):
    photo_path = "static/img/main_menu.jpg"

    reminders_button = InlineKeyboardButton(
        text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="reminder_settings"
    )
    personal_info = InlineKeyboardButton(
        text="üë§ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="personal_info"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[[reminders_button], [personal_info]])

    user_id = message.from_user.id
    data = await state.get_data()
    existing_user = data.get("existing_user")

    if existing_user is None:
        existing_user = await database.get_entity_parameter(
            model_class=User, filters={"userid": user_id}
        )
        if existing_user:
            await state.update_data(existing_user=True)

    if existing_user:
        await message.answer_photo(
            photo=FSInputFile(photo_path),
            caption="–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å, –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∞ –µ—â—ë —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, —á—Ç–æ–±—ã –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–ø—Ä–æ—Å –±—ã–ª —Ç–æ—á–Ω–µ–µ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–µ–µ.",
            reply_markup=markup,
        )
    else:
        await message.answer(
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –≤—ã–±—Ä–∞–≤ —è–∑—ã–∫. "
                 "–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞–∂–∞–≤ /start \n–≤ –º–µ–Ω—é ‚ÜôÔ∏è"
        )


@router.callback_query(F.data == "reminder_settings")
async def reminder_settings(callback_query: CallbackQuery):
    photo_path = "static/img/reminders.jpg"

    set_time_button = InlineKeyboardButton(
        text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞",
        callback_data="set_reminder_time",
    )
    disable_button = InlineKeyboardButton(
        text="–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_reminder"
    )
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")

    markup = InlineKeyboardMarkup(
        inline_keyboard=[[set_time_button], [disable_button], [back_button]]
    )
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_path),
        caption="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π",
        reply_markup=markup
    )


@router.callback_query(F.data == "set_reminder_time")
async def set_reminder_time(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú –ù–∞–ø—Ä–∏–º–µ—Ä 17:45 –∏–ª–∏ 09:05"
    )
    await state.set_state(ReminderStates.set_time)


@router.message(ReminderStates.set_time)
async def process_set_time(
    message: Message, state: FSMContext, database: Postgres, bot: Bot
):
    try:
        reminder_time_str = message.text
        reminder_time = datetime.strptime(reminder_time_str, "%H:%M").time()
        user_id = message.from_user.id

        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="reminder_time",
            value=reminder_time,
            model_class=User,
        )

        await state.clear()
        reminder_manager = ReminderManager(database, bot, state)
        # await reminder_manager.schedule_reminder(
        #     user_id, reminder_time
        # )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await reminder_manager.schedule_reminder(user_id, reminder_time)

        await message.answer(
            "–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n –î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!"
        )
    except ValueError as e:
        logger.error(f"Error parsing reminder_time: {e}")
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú."
        )
    except Exception as e:
        logger.error(f"Error setting reminder time: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


@router.callback_query(F.data == "disable_reminder")
async def disable_reminder(
    callback_query: CallbackQuery,
    state: FSMContext,
    database: Postgres,
    bot: Bot,
):
    try:
        user_id = callback_query.from_user.id
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="reminder_time",
            value=None,
            model_class=User,
        )
        await state.clear()

        reminder_manager = ReminderManager(database, bot, state)

        # –û—Ç–º–µ–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        await reminder_manager.cancel_reminder(user_id)

        await callback_query.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error disabling reminder: {e}")
        await callback_query.message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )


@router.callback_query(F.data == "personal_info")
async def personal_info_handler(callback_query: CallbackQuery, state: FSMContext):
    photo_path = "static/img/pers_settings.jpg"

    buttons = [
        InlineKeyboardButton(text="üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_language"),
        InlineKeyboardButton(text="üìù –£–∫–∞–∑–∞—Ç—å –§–ò–û", callback_data="set_fullname"),
        InlineKeyboardButton(text="üå∏ –£–∫–∞–∑–∞—Ç—å –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª", callback_data="set_menstrual_cycle"),
        InlineKeyboardButton(text="üåç –£–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="set_country"),
        InlineKeyboardButton(text="üèôÔ∏è –£–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data="set_city"),
        InlineKeyboardButton(text="üíä–£–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç", callback_data="set_medicament"),
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings"),
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=[[button] for button in buttons])

    await callback_query.message.delete()
    await callback_query.message.answer_photo(
        photo=FSInputFile(photo_path),
        caption="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
        reply_markup=markup
    )


@router.callback_query(F.data == "set_fullname")
async def set_fullname_handler(callback_query: CallbackQuery, state: FSMContext):
    button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])


    await state.set_state(PersonalSettingsStates.waiting_for_fullname)
    await callback_query.message.delete()
    await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –§–ò–û –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=markup)



@router.message(PersonalSettingsStates.waiting_for_fullname)
async def receive_fullname(message: Message, state: FSMContext, database: Postgres):
    user_id = message.from_user.id
    fullname = message.text

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="fio",
            value=fullname,
            model_class=User
        )
        await state.clear()
        await message.answer("–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error updating fullname: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –§–ò–û.")


@router.callback_query(F.data == "set_menstrual_cycle")
async def set_menstrual_cycle_handler(callback_query: CallbackQuery, state: FSMContext):
    yes_button = InlineKeyboardButton(text="–î–∞", callback_data="menstrual_cycle_yes")
    no_button = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="menstrual_cycle_no")
    back_button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")
    markup = InlineKeyboardMarkup(inline_keyboard=[[yes_button, no_button], [back_button]])

    await callback_query.message.delete()
    await callback_query.message.answer(
        "–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª?",
        reply_markup=markup
    )

@router.callback_query(lambda c: c.data in ["menstrual_cycle_yes", "menstrual_cycle_no"])
async def receive_menstrual_cycle(callback_query: CallbackQuery, state: FSMContext, database: Postgres):
    user_id = callback_query.from_user.id
    menstrual_cycle = "–¥–∞" if callback_query.data == "menstrual_cycle_yes" else "–Ω–µ—Ç"

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="menstrual_cycle",
            value=menstrual_cycle,
            model_class=User
        )
        await callback_query.message.delete()
        await callback_query.message.answer("–î–∞–Ω–Ω—ã–µ –æ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"Error updating menstrual cycle: {e}")
        await callback_query.message.delete()
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ–Ω—Å—Ç—Ä—É–∞–ª—å–Ω–æ–º —Ü–∏–∫–ª–µ.")



@router.callback_query(F.data == "set_country")
async def set_country_handler(callback_query: CallbackQuery, state: FSMContext):
    button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])

    await state.set_state(PersonalSettingsStates.set_country)
    await callback_query.message.delete()
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É —Å—Ç—Ä–∞–Ω—É, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=markup)


@router.message(PersonalSettingsStates.set_country)
async def receive_country(message: Message, state: FSMContext, database: Postgres):
    user_id = message.from_user.id
    country = message.text

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="country",
            value=country,
            model_class=User
        )
        await state.clear()
        await message.answer("–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"Error updating country: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω—ã.")


@router.callback_query(F.data =="set_city")
async def set_city_handler(callback_query: CallbackQuery, state: FSMContext):
    button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])

    await state.set_state(PersonalSettingsStates.waiting_for_city)
    await callback_query.message.delete()
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥, –ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", reply_markup=markup)


@router.message(PersonalSettingsStates.waiting_for_city)
async def receive_city(message: Message, state: FSMContext, database: Postgres):
    user_id = message.from_user.id
    city = message.text

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="city",
            value=city,
            model_class=User
        )
        await state.clear()
        await message.answer("–í–∞—à –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"Error updating city: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞.")


@router.callback_query(F.data =="set_medicament")
async def set_medicament_handler(callback_query: CallbackQuery, state: FSMContext):
    button = InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="back_to_settings")
    markup = InlineKeyboardMarkup(inline_keyboard=[[button]])

    await state.set_state(PersonalSettingsStates.set_medicament)
    await callback_query.message.delete()
    await callback_query.message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, "
        "–∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ "
        "–¥–ª—è –ª–µ—á–µ–Ω–∏—è —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–π –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏,"
        "–ª–∏–±–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫",
        reply_markup=markup
    )


@router.message(PersonalSettingsStates.set_medicament)
async def receive_medicament(message: Message, state: FSMContext, database: Postgres):
    user_id = message.from_user.id
    medicament = message.text

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="const_medication_name",
            value=medicament,
            model_class=User
        )
        await state.clear()
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"Error updating medicament: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞.")



@router.callback_query(F.data == "change_language")
async def change_language_handler(callback_query: CallbackQuery):
    rus_button = InlineKeyboardButton(
        text="–†—É—Å—Å–∫–∏–π", callback_data="set_lang_from_menu_ru"
    )
    kaz_button = InlineKeyboardButton(
        text="“ö–∞–∑–∞“õ", callback_data="set_lang_from_menu_kk"
    )
    back_button = InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è", callback_data="personal_info"
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[[rus_button], [kaz_button], [back_button]])

    await callback_query.message.delete()
    await callback_query.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º.",
        reply_markup=markup
    )


@router.callback_query(F.data.in_({"set_lang_from_menu_ru", "set_lang_from_menu_kk"}))
async def set_language(callback_query: CallbackQuery, state: FSMContext, database: Postgres):
    user_id = callback_query.from_user.id
    language = "ru" if callback_query.data == "set_lang_from_menu_ru" else "kk"
    language_text = "–†—É—Å—Å–∫–∏–π" if language == "ru" else "“ö–∞–∑–∞“õ"

    try:
        await database.update_entity_parameter(
            entity_id=user_id,
            parameter="language",
            value=language,
            model_class=User
        )
        await state.update_data(language=language)
        await callback_query.message.delete()
        await callback_query.message.answer(f"–í—ã–±—Ä–∞–Ω {language_text} —è–∑—ã–∫.")
    except Exception as e:
        logger.error(f"Error updating language: {e}")
        await callback_query.message.delete()
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —è–∑—ã–∫–∞.")
















